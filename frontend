//Frontend Integration
//use React.js for the frontend

Setup React.js Project
Install React:

npx create-react-app college-event-management
cd college-event-management
npm install axios react-router-dom


//Structure your frontend:

src/
├── components/
│   ├── HomePage.js
│   ├── EventList.js
│   ├── EventDetails.js
│   ├── Login.js
│   ├── Register.js
│   ├── Dashboard.js
├── App.js
├── api.js (for Axios configuration)
└── index.js


//Axios Configuration (api.js)
//javascript
 
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:5000/api', // Backend URL
});

export default api;


//Sample Component: HomePage
//javascript
 
import React, { useEffect, useState } from 'react';
import api from '../api';

const HomePage = () => {
  const [events, setEvents] = useState([]);

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const response = await api.get('/events');
        setEvents(response.data);
      } catch (err) {
        console.error(err);
      }
    };
    fetchEvents();
  }, []);

  return (
    <div>
      <h1>Welcome to College Event Management</h1>
      <ul>
        {events.map((event) => (
          <li key={event._id}>
            <h2>{event.title}</h2>
            <p>{event.description}</p>
            <button onClick={() => window.location.href = `/event/${event._id}`}>View Details</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default HomePage;


//Routing Setup (App.js)
//javascript
 
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import HomePage from './components/HomePage';
import EventList from './components/EventList';
import EventDetails from './components/EventDetails';
import Login from './components/Login';
import Register from './components/Register';

const App = () => (
  <Router>
    <Routes>
      <Route path="/" element={<HomePage />} />
      <Route path="/events" element={<EventList />} />
      <Route path="/event/:id" element={<EventDetails />} />
      <Route path="/login" element={<Login />} />
      <Route path="/register" element={<Register />} />
    </Routes>
  </Router>
);

export default App;


//Deployment
//Backend Deployment
//1.Host Backend on Heroku, Railway, or AWS:

  //Install Heroku CLI.
  //Deploy:
 
heroku create
git push heroku main

  //Ensure your MongoDB is hosted on MongoDB Atlas.

//2.Update your backend baseURL in api.js to point to the deployed server.

//Frontend Deployment
//1.Build the React app:

 
npm run build
//2.Host the frontend on Vercel, Netlify, or AWS S3:

//For Vercel:
 
npm install -g vercel
vercel
//3.Connect your frontend to the backend by updating the baseURL in api.js.



//Organizer Dashboard API Endpoints
//Create, Edit, and Delete Events
//javascript
 
// Create an event
app.post('/api/organizer/events', authenticate, async (req, res) => {
  if (req.user.role !== 'organizer') {
    return res.status(403).send({ message: 'Access Denied' });
  }
  const { title, description, category, date, time, venue, isPaid, price } = req.body;
  try {
    const event = new Event({
      title, description, category, date, time, venue,
      organizer: req.user._id, isPaid, price,
    });
    await event.save();
    res.status(201).send({ message: 'Event created successfully', event });
  } catch (err) {
    res.status(400).send(err);
  }
});

// Update an event
app.put('/api/organizer/events/:id', authenticate, async (req, res) => {
  if (req.user.role !== 'organizer') {
    return res.status(403).send({ message: 'Access Denied' });
  }
  try {
    const event = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!event) return res.status(404).send({ message: 'Event not found' });
    res.status(200).send({ message: 'Event updated successfully', event });
  } catch (err) {
    res.status(400).send(err);
  }
});

// Delete an event
app.delete('/api/organizer/events/:id', authenticate, async (req, res) => {
  if (req.user.role !== 'organizer') {
    return res.status(403).send({ message: 'Access Denied' });
  }
  try {
    const event = await Event.findByIdAndDelete(req.params.id);
    if (!event) return res.status(404).send({ message: 'Event not found' });
    res.status(200).send({ message: 'Event deleted successfully' });
  } catch (err) {
    res.status(400).send(err);
  }
});


//Frontend: Organizer Dashboard Page
//Dashboard Structure
  //Sidebar:
   //Navigation links for:
      //Create Event
      //Manage Events
      //View Participants
      //Feedback
      //Analytics
  //Main Content:
    //Display the selected functionality (based on navigation).
//Event Management UI
 
import React, { useState, useEffect } from 'react';
import api from '../api';

const OrganizerDashboard = () => {
  const [events, setEvents] = useState([]);

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const response = await api.get('/organizer/events', {
          headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
        });
        setEvents(response.data);
      } catch (err) {
        console.error(err);
      }
    };
    fetchEvents();
  }, []);

  const deleteEvent = async (id) => {
    try {
      await api.delete(`/organizer/events/${id}`, {
        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
      });
      setEvents(events.filter((event) => event._id !== id));
    } catch (err) {
      console.error(err);
    }
  };

  return (
    <div>
      <h1>Organizer Dashboard</h1>
      <h2>Your Events</h2>
      <ul>
        {events.map((event) => (
          <li key={event._id}>
            <h3>{event.title}</h3>
            <p>{event.description}</p>
            <button onClick={() => deleteEvent(event._id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default OrganizerDashboard;
