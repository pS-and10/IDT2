Setup and Dependencies

const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const app = express();

// Middleware
app.use(bodyParser.json());
app.use(cors());

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/event_management', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('Connected to MongoDB'))
  .catch((err) => console.error('Failed to connect to MongoDB', err));

Database Models
1. User Model
const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  role: { type: String, enum: ['user', 'admin', 'organizer'], default: 'user' },
});

userSchema.pre('save', async function (next) {
  if (this.isModified('password')) {
    this.password = await bcrypt.hash(this.password, 10);
  }
  next();
});

const User = mongoose.model('User', userSchema);

2.Event Model
const eventSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  category: { type: String, required: true },
  date: { type: Date, required: true },
  time: { type: String, required: true },
  venue: { type: String, required: true },
  organizer: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  participants: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
  isPaid: { type: Boolean, default: false },
  price: { type: Number, default: 0 },
});

const Event = mongoose.model('Event', eventSchema);

Authentication Middleware

const authenticate = (req, res, next) => {
  const token = req.headers['authorization'];
  if (!token) return res.status(401).send({ message: 'Access Denied' });

  try {
    const verified = jwt.verify(token, 'SECRET_KEY');
    req.user = verified;
    next();
  } catch (err) {
    res.status(400).send({ message: 'Invalid Token' });
  }
};



API Routes
1. User Routes
// Register a new user
app.post('/api/register', async (req, res) => {
  const { name, email, password, role } = req.body;
  try {
    const user = new User({ name, email, password, role });
    await user.save();
    res.status(201).send({ message: 'User registered successfully' });
  } catch (err) {
    res.status(400).send(err);
  }
});

// Login a user
app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).send({ message: 'User not found' });

    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) return res.status(400).send({ message: 'Invalid password' });

    const token = jwt.sign({ _id: user._id, role: user.role }, 'SECRET_KEY', { expiresIn: '1h' });
    res.status(200).send({ token, role: user.role });
  } catch (err) {
    res.status(400).send(err);
  }
});


2.Event Routes
// Create a new event
app.post('/api/events', authenticate, async (req, res) => {
  if (req.user.role !== 'organizer') {
    return res.status(403).send({ message: 'Access Denied' });
  }

  const { title, description, category, date, time, venue, isPaid, price } = req.body;
  try {
    const event = new Event({
      title, description, category, date, time, venue,
      organizer: req.user._id,
      isPaid, price,
    });
    await event.save();
    res.status(201).send({ message: 'Event created successfully', event });
  } catch (err) {
    res.status(400).send(err);
  }
});

// Get all events
app.get('/api/events', async (req, res) => {
  try {
    const events = await Event.find().populate('organizer', 'name email');
    res.status(200).send(events);
  } catch (err) {
    res.status(400).send(err);
  }
});

// Register for an event
app.post('/api/events/:id/register', authenticate, async (req, res) => {
  try {
    const event = await Event.findById(req.params.id);
    if (!event) return res.status(404).send({ message: 'Event not found' });

    event.participants.push(req.user._id);
    await event.save();
    res.status(200).send({ message: 'Successfully registered for the event' });
  } catch (err) {
    res.status(400).send(err);
  }
});


Run the Server
const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

Testing the API
Use Postman or cURL to test each endpoint.
Test the /api/register and /api/login endpoints to create users and authenticate them.
Use the token from the login response to access protected routes like creating events and registering for events.
